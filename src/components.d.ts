/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IFormStyle, IQuestionMeta } from "./api/types";
export namespace Components {
    interface ApplyButton {
        "buttonClass": string;
        "buttonType": string;
    }
    interface ApplyCheckbox {
        "elementid": IQuestionMeta['id'];
        "limit": IQuestionMeta['limit'];
        "options": IQuestionMeta['options'];
        "question": IQuestionMeta['question'];
        "required": IQuestionMeta['required'];
    }
    interface ApplyDate {
        "elementid": IQuestionMeta['id'];
        "format": IQuestionMeta['format'];
        "max": IQuestionMeta['max'];
        "min": IQuestionMeta['min'];
        "question": IQuestionMeta['question'];
        "required": IQuestionMeta['required'];
        "type": IQuestionMeta['type'];
    }
    interface ApplyFile {
        "elementid": IQuestionMeta['id'];
        "limit": IQuestionMeta['limit'];
        "question": IQuestionMeta['question'];
        "required": IQuestionMeta['required'];
        "type": IQuestionMeta['type'];
    }
    interface ApplyFormbuilder {
        "canMove": (num: number) => Promise<void>;
        "computedQuestions": IQuestionMeta[][];
        "getButtonType": () => Promise<"submit" | "text">;
        "handleSubmit": (e: Event) => Promise<void>;
        "jobId": number;
        "mediaId": number;
        "questions": IQuestionMeta[];
    }
    interface ApplyHierarchical {
        "elementid": IQuestionMeta['id'];
        "hierarchicalOptions": Array<any>;
        "options": IQuestionMeta['options'];
        "question": IQuestionMeta['question'];
        "required": IQuestionMeta['required'];
    }
    interface ApplyInformation {
        "elementid": IQuestionMeta['id'];
        "fontsize": IQuestionMeta['fontsize'];
        "text": IQuestionMeta['text'];
    }
    interface ApplyLabel {
        "elementId": string;
        "storeType": string;
    }
    interface ApplyMultiselect {
        "elementid": IQuestionMeta['id'];
        "options": IQuestionMeta['options'];
        "question": IQuestionMeta['question'];
        "required": IQuestionMeta['required'];
        "value": string[];
    }
    interface ApplyPhone {
        "elementid": IQuestionMeta['id'];
        "format": IQuestionMeta['format'];
        "limit": IQuestionMeta['limit'];
        "question": IQuestionMeta['question'];
        "required": IQuestionMeta['required'];
    }
    interface ApplyRadio {
        "elementid": IQuestionMeta['id'];
        "options": IQuestionMeta['options'];
        "question": IQuestionMeta['question'];
        "required": IQuestionMeta['required'];
    }
    interface ApplySelect {
        "elementid": IQuestionMeta['id'];
        "options": IQuestionMeta['options'];
        "question": IQuestionMeta['question'];
        "required": IQuestionMeta['required'];
    }
    interface ApplyText {
        "elementid": IQuestionMeta['id'];
        "format": IQuestionMeta['format'];
        "limit": IQuestionMeta['limit'];
        "question": IQuestionMeta['question'];
        "required": IQuestionMeta['required'];
        "storeType": IQuestionMeta['storeType'];
    }
    interface ApplyTextarea {
        "elementid": IQuestionMeta['id'];
        "limit": IQuestionMeta['limit'];
        "question": IQuestionMeta['question'];
        "required": IQuestionMeta['required'];
    }
    interface ApplyWithReplacement {
        "changeStyle": () => Promise<void>;
        "options": IFormStyle;
    }
    interface RequiredIcon {
        "required": boolean;
    }
}
declare global {
    interface HTMLApplyButtonElement extends Components.ApplyButton, HTMLStencilElement {
    }
    var HTMLApplyButtonElement: {
        prototype: HTMLApplyButtonElement;
        new (): HTMLApplyButtonElement;
    };
    interface HTMLApplyCheckboxElement extends Components.ApplyCheckbox, HTMLStencilElement {
    }
    var HTMLApplyCheckboxElement: {
        prototype: HTMLApplyCheckboxElement;
        new (): HTMLApplyCheckboxElement;
    };
    interface HTMLApplyDateElement extends Components.ApplyDate, HTMLStencilElement {
    }
    var HTMLApplyDateElement: {
        prototype: HTMLApplyDateElement;
        new (): HTMLApplyDateElement;
    };
    interface HTMLApplyFileElement extends Components.ApplyFile, HTMLStencilElement {
    }
    var HTMLApplyFileElement: {
        prototype: HTMLApplyFileElement;
        new (): HTMLApplyFileElement;
    };
    interface HTMLApplyFormbuilderElement extends Components.ApplyFormbuilder, HTMLStencilElement {
    }
    var HTMLApplyFormbuilderElement: {
        prototype: HTMLApplyFormbuilderElement;
        new (): HTMLApplyFormbuilderElement;
    };
    interface HTMLApplyHierarchicalElement extends Components.ApplyHierarchical, HTMLStencilElement {
    }
    var HTMLApplyHierarchicalElement: {
        prototype: HTMLApplyHierarchicalElement;
        new (): HTMLApplyHierarchicalElement;
    };
    interface HTMLApplyInformationElement extends Components.ApplyInformation, HTMLStencilElement {
    }
    var HTMLApplyInformationElement: {
        prototype: HTMLApplyInformationElement;
        new (): HTMLApplyInformationElement;
    };
    interface HTMLApplyLabelElement extends Components.ApplyLabel, HTMLStencilElement {
    }
    var HTMLApplyLabelElement: {
        prototype: HTMLApplyLabelElement;
        new (): HTMLApplyLabelElement;
    };
    interface HTMLApplyMultiselectElement extends Components.ApplyMultiselect, HTMLStencilElement {
    }
    var HTMLApplyMultiselectElement: {
        prototype: HTMLApplyMultiselectElement;
        new (): HTMLApplyMultiselectElement;
    };
    interface HTMLApplyPhoneElement extends Components.ApplyPhone, HTMLStencilElement {
    }
    var HTMLApplyPhoneElement: {
        prototype: HTMLApplyPhoneElement;
        new (): HTMLApplyPhoneElement;
    };
    interface HTMLApplyRadioElement extends Components.ApplyRadio, HTMLStencilElement {
    }
    var HTMLApplyRadioElement: {
        prototype: HTMLApplyRadioElement;
        new (): HTMLApplyRadioElement;
    };
    interface HTMLApplySelectElement extends Components.ApplySelect, HTMLStencilElement {
    }
    var HTMLApplySelectElement: {
        prototype: HTMLApplySelectElement;
        new (): HTMLApplySelectElement;
    };
    interface HTMLApplyTextElement extends Components.ApplyText, HTMLStencilElement {
    }
    var HTMLApplyTextElement: {
        prototype: HTMLApplyTextElement;
        new (): HTMLApplyTextElement;
    };
    interface HTMLApplyTextareaElement extends Components.ApplyTextarea, HTMLStencilElement {
    }
    var HTMLApplyTextareaElement: {
        prototype: HTMLApplyTextareaElement;
        new (): HTMLApplyTextareaElement;
    };
    interface HTMLApplyWithReplacementElement extends Components.ApplyWithReplacement, HTMLStencilElement {
    }
    var HTMLApplyWithReplacementElement: {
        prototype: HTMLApplyWithReplacementElement;
        new (): HTMLApplyWithReplacementElement;
    };
    interface HTMLRequiredIconElement extends Components.RequiredIcon, HTMLStencilElement {
    }
    var HTMLRequiredIconElement: {
        prototype: HTMLRequiredIconElement;
        new (): HTMLRequiredIconElement;
    };
    interface HTMLElementTagNameMap {
        "apply-button": HTMLApplyButtonElement;
        "apply-checkbox": HTMLApplyCheckboxElement;
        "apply-date": HTMLApplyDateElement;
        "apply-file": HTMLApplyFileElement;
        "apply-formbuilder": HTMLApplyFormbuilderElement;
        "apply-hierarchical": HTMLApplyHierarchicalElement;
        "apply-information": HTMLApplyInformationElement;
        "apply-label": HTMLApplyLabelElement;
        "apply-multiselect": HTMLApplyMultiselectElement;
        "apply-phone": HTMLApplyPhoneElement;
        "apply-radio": HTMLApplyRadioElement;
        "apply-select": HTMLApplySelectElement;
        "apply-text": HTMLApplyTextElement;
        "apply-textarea": HTMLApplyTextareaElement;
        "apply-with-replacement": HTMLApplyWithReplacementElement;
        "required-icon": HTMLRequiredIconElement;
    }
}
declare namespace LocalJSX {
    interface ApplyButton {
        "buttonClass"?: string;
        "buttonType"?: string;
    }
    interface ApplyCheckbox {
        "elementid"?: IQuestionMeta['id'];
        "limit"?: IQuestionMeta['limit'];
        "onValueChanged"?: (event: CustomEvent<string>) => void;
        "options"?: IQuestionMeta['options'];
        "question"?: IQuestionMeta['question'];
        "required"?: IQuestionMeta['required'];
    }
    interface ApplyDate {
        "elementid"?: IQuestionMeta['id'];
        "format"?: IQuestionMeta['format'];
        "max"?: IQuestionMeta['max'];
        "min"?: IQuestionMeta['min'];
        "onValueChanged"?: (event: CustomEvent<string>) => void;
        "question"?: IQuestionMeta['question'];
        "required"?: IQuestionMeta['required'];
        "type"?: IQuestionMeta['type'];
    }
    interface ApplyFile {
        "elementid"?: IQuestionMeta['id'];
        "limit"?: IQuestionMeta['limit'];
        "onValueChanged"?: (event: CustomEvent<FileList>) => void;
        "question"?: IQuestionMeta['question'];
        "required"?: IQuestionMeta['required'];
        "type"?: IQuestionMeta['type'];
    }
    interface ApplyFormbuilder {
        "computedQuestions"?: IQuestionMeta[][];
        "jobId"?: number;
        "mediaId"?: number;
        "questions"?: IQuestionMeta[];
    }
    interface ApplyHierarchical {
        "elementid"?: IQuestionMeta['id'];
        "hierarchicalOptions"?: Array<any>;
        "onValueChanged"?: (event: CustomEvent<string>) => void;
        "options"?: IQuestionMeta['options'];
        "question"?: IQuestionMeta['question'];
        "required"?: IQuestionMeta['required'];
    }
    interface ApplyInformation {
        "elementid"?: IQuestionMeta['id'];
        "fontsize"?: IQuestionMeta['fontsize'];
        "text"?: IQuestionMeta['text'];
    }
    interface ApplyLabel {
        "elementId"?: string;
        "storeType"?: string;
    }
    interface ApplyMultiselect {
        "elementid"?: IQuestionMeta['id'];
        "onValueChanged"?: (event: CustomEvent<string[]>) => void;
        "options"?: IQuestionMeta['options'];
        "question"?: IQuestionMeta['question'];
        "required"?: IQuestionMeta['required'];
        "value"?: string[];
    }
    interface ApplyPhone {
        "elementid"?: IQuestionMeta['id'];
        "format"?: IQuestionMeta['format'];
        "limit"?: IQuestionMeta['limit'];
        "onValueChanged"?: (event: CustomEvent<string>) => void;
        "question"?: IQuestionMeta['question'];
        "required"?: IQuestionMeta['required'];
    }
    interface ApplyRadio {
        "elementid"?: IQuestionMeta['id'];
        "onValueChanged"?: (event: CustomEvent<string>) => void;
        "options"?: IQuestionMeta['options'];
        "question"?: IQuestionMeta['question'];
        "required"?: IQuestionMeta['required'];
    }
    interface ApplySelect {
        "elementid"?: IQuestionMeta['id'];
        "onValueChanged"?: (event: CustomEvent<string>) => void;
        "options"?: IQuestionMeta['options'];
        "question"?: IQuestionMeta['question'];
        "required"?: IQuestionMeta['required'];
    }
    interface ApplyText {
        "elementid"?: IQuestionMeta['id'];
        "format"?: IQuestionMeta['format'];
        "limit"?: IQuestionMeta['limit'];
        "onValueChanged"?: (event: CustomEvent<string>) => void;
        "question"?: IQuestionMeta['question'];
        "required"?: IQuestionMeta['required'];
        "storeType"?: IQuestionMeta['storeType'];
    }
    interface ApplyTextarea {
        "elementid"?: IQuestionMeta['id'];
        "limit"?: IQuestionMeta['limit'];
        "onValueChanged"?: (event: CustomEvent<string>) => void;
        "question"?: IQuestionMeta['question'];
        "required"?: IQuestionMeta['required'];
    }
    interface ApplyWithReplacement {
        "options"?: IFormStyle;
    }
    interface RequiredIcon {
        "required"?: boolean;
    }
    interface IntrinsicElements {
        "apply-button": ApplyButton;
        "apply-checkbox": ApplyCheckbox;
        "apply-date": ApplyDate;
        "apply-file": ApplyFile;
        "apply-formbuilder": ApplyFormbuilder;
        "apply-hierarchical": ApplyHierarchical;
        "apply-information": ApplyInformation;
        "apply-label": ApplyLabel;
        "apply-multiselect": ApplyMultiselect;
        "apply-phone": ApplyPhone;
        "apply-radio": ApplyRadio;
        "apply-select": ApplySelect;
        "apply-text": ApplyText;
        "apply-textarea": ApplyTextarea;
        "apply-with-replacement": ApplyWithReplacement;
        "required-icon": RequiredIcon;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "apply-button": LocalJSX.ApplyButton & JSXBase.HTMLAttributes<HTMLApplyButtonElement>;
            "apply-checkbox": LocalJSX.ApplyCheckbox & JSXBase.HTMLAttributes<HTMLApplyCheckboxElement>;
            "apply-date": LocalJSX.ApplyDate & JSXBase.HTMLAttributes<HTMLApplyDateElement>;
            "apply-file": LocalJSX.ApplyFile & JSXBase.HTMLAttributes<HTMLApplyFileElement>;
            "apply-formbuilder": LocalJSX.ApplyFormbuilder & JSXBase.HTMLAttributes<HTMLApplyFormbuilderElement>;
            "apply-hierarchical": LocalJSX.ApplyHierarchical & JSXBase.HTMLAttributes<HTMLApplyHierarchicalElement>;
            "apply-information": LocalJSX.ApplyInformation & JSXBase.HTMLAttributes<HTMLApplyInformationElement>;
            "apply-label": LocalJSX.ApplyLabel & JSXBase.HTMLAttributes<HTMLApplyLabelElement>;
            "apply-multiselect": LocalJSX.ApplyMultiselect & JSXBase.HTMLAttributes<HTMLApplyMultiselectElement>;
            "apply-phone": LocalJSX.ApplyPhone & JSXBase.HTMLAttributes<HTMLApplyPhoneElement>;
            "apply-radio": LocalJSX.ApplyRadio & JSXBase.HTMLAttributes<HTMLApplyRadioElement>;
            "apply-select": LocalJSX.ApplySelect & JSXBase.HTMLAttributes<HTMLApplySelectElement>;
            "apply-text": LocalJSX.ApplyText & JSXBase.HTMLAttributes<HTMLApplyTextElement>;
            "apply-textarea": LocalJSX.ApplyTextarea & JSXBase.HTMLAttributes<HTMLApplyTextareaElement>;
            "apply-with-replacement": LocalJSX.ApplyWithReplacement & JSXBase.HTMLAttributes<HTMLApplyWithReplacementElement>;
            "required-icon": LocalJSX.RequiredIcon & JSXBase.HTMLAttributes<HTMLRequiredIconElement>;
        }
    }
}
